swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Escapade"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "escapade"
  description: "Server of escapade"
  externalDocs:
    description: "github"
    url: "https://github.com/go-park-mail-ru/2019_1_Escapade"
- name: "store"
  description: "Access to Petstore orders"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "Add user to database, returns cookie"
      operationId: "register"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/UserPrivateInfo"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Error with cookie"
          schema:
            $ref: "#/definitions/Result"
    get:
      tags:
      - "user"
      summary: "Get public user information"
      description: "Add user to database, returns cookie"
      operationId: "getProfile"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Users name, email, best score and best time"
        required: true
        schema:
          $ref: "#/definitions/UserPrivateInfo"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserPublicInfo"
        400:
          description: "Error with cookie"
          schema:
            $ref: "#/definitions/Result"
    put:
      tags:
      - "user"
      summary: "Update private user information"
      description: ""
      operationId: "updateProfile"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Updated name, password or email"
        required: true
        schema:
          $ref: "#/definitions/UserPrivateInfo"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Result"
        400:
          description: "Error with cookie"
          schema:
            $ref: "#/definitions/Result"
    options:
      tags:
      - "user"
      summary: "preflight CORS"
      description: ""
      operationId: "optionsUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: ""
      operationId: "DeleteAccount"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Users name, password and email"
        required: true
        schema:
          $ref: "#/definitions/UserPrivateInfo"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserPublicInfo"
        400:
          description: "Error with cookie"
          schema:
            $ref: "#/definitions/Result"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/UserPrivateInfo"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            Origin:
              type: "string"
              format: "date-time"
              description: "Indicates where a fetch originates from"
            content-type:
              type: "string"
              format: "date-time"
              description: "-"
        400:
          description: "Invalid username/password supplied"
    options:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "loginOptions"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
        500:
          description: "no cookie found"
  /user/logout:
    delete:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
        500:
          description: "no cookie found"
    options:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutOPtions"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
        500:
          description: "no cookie found"
    
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Game:
    type: "object"
    properties:
      fieldWidth:
        type: "integer"
        format: "unsigned"
      fieldHeight:
        type: "integer"
        format: "unsigned"
      minsTotal:
        type: "integer"
        format: "unsigned"
      minsFound:
        type: "integer"
        format: "unsigned"
      finihsed:
        type: "boolean"
      exploded:
        type: "boolean"
    xml:
      name: "Game"
  Pages:
    type: "object"
    properties:
      amount:
        type: "integer"
    xml:
      name: "Pages"
  Result:
    type: "object"
    properties:
      place:
        type: "string"
      success:
        type: "boolean"
      message:
        type: "string"
    xml:
      name: "Result"
  UserPrivateInfo:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "UserPrivateInfo"
  UserPublicInfo:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      bestScore:
        type: "object"
        properties:
         String:
          type: "string"
         Valid:
          type: "boolean"
      bestTime:
        type: "object"
        properties:
         String:
          type: "string"
         Valid:
          type: "boolean"
    xml:
      name: "UserPublicInfo"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"